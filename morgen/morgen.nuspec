<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://docs.chocolatey.org/en-us/create/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://community.chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>morgen</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>3.6.19</version>
    <packageSourceUrl>https://github.com/Zoullx/chocolatey-packages/tree/master/morgen</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>Zoull</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>Morgen Calendar</title>
    <authors>Morgen</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>https://www.morgen.so</projectUrl>
    <!-- There are a number of CDN Services that can be used for hosting the Icon for a package. More information can be found here: https://docs.chocolatey.org/en-us/create/create-packages#package-icon-guidelines -->
    <!-- Here is an example using Githack -->
    <iconUrl>https://cdn.jsdelivr.net/gh/Zoullx/chocolatey-packages/morgen/morgen.png</iconUrl>
    <copyright>© 2020-2024 Morgen AG.</copyright>
    <!-- If there is a license Url available, it is required for the community feed -->
    <!-- <licenseUrl>Software License Location __REMOVE_OR_FILL_OUT__</licenseUrl> -->
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!--<projectSourceUrl>Software Source Location - is the software FOSS somewhere? Link to it with this</projectSourceUrl>-->
    <!--<docsUrl>At what url are the software docs located?</docsUrl>-->
    <!--<mailingListUrl></mailingListUrl>-->
    <!--<bugTrackerUrl></bugTrackerUrl>-->
    <tags>morgen calendar tasks planner schedule time-management</tags>
    <summary>Turn to-dos into daily action plans. The AI Planner designs daily plans that prioritize your most important tasks and recommend optimal times to work on them based on your unique rhythms, power hours, and goals. The plan is yours to tune, adjust, and approve.</summary>
    <description>
# Morgen

# Turn to-dos into daily action plans

Can AI build a daily plan for how you work best? We think so.

The AI Planner designs daily plans that prioritize your most important tasks and recommend optimal times to work on them based on your unique rhythms, power hours, and goals. The plan is yours to tune, adjust, and approve.

## Streamlined Time Management

Stop jumping between calendars and apps. Morgen gives you a holistic view of your time, paired with powerful automations.

### Manage All Your Calendars Together

Morgen simplifies time management by consolidating and syncing all your calendars into one easy-to-use interface.

Morgen integrates with nearly every calendar provider, including Google, Outlook, Apple, Exchange, Fastmail, and more.

### Daily Plans with the Right Tasks at Your Optimal Time

Morgen's AI Planner generates daily plans that prioritize the tasks that matter to you.

Plans can span all parts of your life, recommending when to tackle urgent work deliverables, which life to-dos need attention, and protecting time for creative pursuits.

AI Planner works with tasks from Morgen, Notion, Todoist, Linear, ClickUp, Google Tasks, and more.

- Calendar Sets

Toggle between calendars or view them all together with shortcuts.

- Custom Views

Jump between your daily planner and calendar views, customize time resolution, hours to display, and more.

- Time Zones

Easily manage events and meetings across time zones.

- Get Notified

Set custom notifications and reminders for important events and scheduled tasks.

- Custom tags

Visually distinguish categories of events with custom tags and colors.

- Merge duplicates

Declutter your calendar by merging duplicate events.

### Hassle-Free Scheduling Made Simple 

Share your availability in seconds using Morgen's Open Invites, Scheduling Links, and Personalized Booking Page.

Morgen checks your real-time availability across your calendars to prevent scheduling conflicts.

### Deploy Smart Team Scheduling

Not only does Morgen make it easy to see when your colleagues are available, it can also reschedule internal meetings to reduce context switching for the whole team.

## Beautifully designed with you in mind

Morgen's intuitive design makes it fast to manage your time then get on with your day.

- Keyboard Shortcuts

Fly through your calendar effortlessly.

- Command Bar

Create events and tasks in seconds using natural language.  

- Search

Quickly find events and scheduled tasks with powerful search. 

- Quick Join

Join virtual meetings in one click from your phone or desktop. 

- One-Click Virtual Rooms

Integrated with Zoom, Google Meet, Microsoft Teams, and Webex to add virtual room details in one click. 

- Light or Dark

Set Morgen to light or dark, or let it adjust based on your operating system settings. 

## Ready to take control of time?

Better plan, prioritize, and balance your time with all your calendars, tasks, scheduling, and planning in one place. Then power it up with Morgen Assist's automations.
    </description>
    <!-- <releaseNotes>__REPLACE_OR_REMOVE__MarkDown_Okay</releaseNotes> -->
    <!-- =============================== -->

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-core.extension" version="1.1.0" />
    </dependencies>-->
    <!-- chocolatey-core.extension - https://community.chocolatey.org/packages/chocolatey-core.extension -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="tools\**" target="tools" />
  </files>
</package>
